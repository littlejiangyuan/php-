###1.基础知识###

函数定义
```
#define ZEND_FN(name) zif_##name
#define ZEND_NAMED_FUNCTION(name)		void name(INTERNAL_FUNCTION_PARAMETERS)
#define ZEND_FUNCTION(name)				ZEND_NAMED_FUNCTION(ZEND_FN(name))
#define INTERNAL_FUNCTION_PARAMETERS int ht, zval *return_value, zval **return_value_ptr, zval *this_ptr, int return_value_used TSRMLS_DC
```
ZEND_FUNCTION(hello) 展开宏，得到
```
zif_name(int ht, zval *return_value, zval **return_value_ptr, zval *this_ptr, int return_value_used TSRMLS_DC)
```
int ht 这个参数包含了Zend 参数的个数。但你不应该直接访问这个值，而是应该通过 ZEND_NUM_ARGS() 宏来获取参数的个数。
zval *return_value，我们在函数内部修改这个指针，函数执行完成后，内核将把这个指针指向的zval返回给用户端的函数调用者。
zval **return_value_ptr，根据这个参数你可以访问该函数所在的对象（换句话说，此时这个函数应该是一个类的“方法”）。推荐使用函数 getThis() 来得到这个值。
zval *this_ptr，如果此函数是一个类的方法，那么这个指针的含义和PHP语言中$this变量差不多。
int return_value_used，代表用户端在调用此函数时有没有使用到它的返回值。

###2.返回值###

```
//这些宏都定义在Zend/zend_API.h文件里
#define RETVAL_RESOURCE(l)              ZVAL_RESOURCE(return_value, l)
#define RETVAL_BOOL(b)                  ZVAL_BOOL(return_value, b)
#define RETVAL_NULL()                   ZVAL_NULL(return_value)
#define RETVAL_LONG(l)                  ZVAL_LONG(return_value, l)
#define RETVAL_DOUBLE(d)                ZVAL_DOUBLE(return_value, d)
#define RETVAL_STRING(s, duplicate)         ZVAL_STRING(return_value, s, duplicate)
#define RETVAL_STRINGL(s, l, duplicate)     ZVAL_STRINGL(return_value, s, l, duplicate)
#define RETVAL_EMPTY_STRING()           ZVAL_EMPTY_STRING(return_value)

#define RETVAL_ZVAL(zv, copy, dtor)     ZVAL_ZVAL(return_value, zv, copy, dtor)
#define RETVAL_FALSE                    ZVAL_BOOL(return_value, 0)
#define RETVAL_TRUE                     ZVAL_BOOL(return_value, 1)
 
#define RETURN_RESOURCE(l)              { RETVAL_RESOURCE(l); return; }
#define RETURN_BOOL(b)                  { RETVAL_BOOL(b); return; }
#define RETURN_NULL()                   { RETVAL_NULL(); return;}
#define RETURN_LONG(l)                  { RETVAL_LONG(l); return; }
#define RETURN_DOUBLE(d)                { RETVAL_DOUBLE(d); return; }
#define RETURN_STRING(s, duplicate)     { RETVAL_STRING(s, duplicate); return; }
#define RETURN_STRINGL(s, l, duplicate) { RETVAL_STRINGL(s, l, duplicate); return; }
#define RETURN_EMPTY_STRING()           { RETVAL_EMPTY_STRING(); return; }
#define RETURN_ZVAL(zv, copy, dtor)     { RETVAL_ZVAL(zv, copy, dtor); return; }
#define RETURN_FALSE                    { RETVAL_FALSE; return; }
#define RETURN_TRUE                     { RETVAL_TRUE; return; 
```

###3.参数###
获取函数调用者传递过来的参数便是使用zend_parse_parameters()函数

type_spec是格式化字符串，其常见的含义如下：

|参数|   代表着的类型|  对应C里的数据类型  |
|-----|-------|------|
|b   |Boolean| zend_bool|
|l   |Integer 整型|long|
|d   |Floating point 浮点型|double|
|s   |String 字符串|char*, int 前者接收指针，后者接收长度|
|r   |Resource 资源|zval*|
|a   |Array 数组|zval*|
|o   |Object instance 对象|zval*|
|O   |Object instance of a specified type 特定类型的对象| zval*, zend_class_entry*|
|z   |Non-specific zval 任意类型～|zval*|
|Z   |zval**类型| zval**|
|f   |表示函数、方法名称，PHP5.1里貌似木有... ...|   |

还可以使用下面参数来增加参数接收能力

|Type| Modifier Meaning|
|------|------|
|\||       它之前的参数都是必须的，之后的都是非必须的，也就是有默认值的。|
|!   |    如果接收了一个PHP语言里的null变量，则直接把其转成C语言里的NULL，而不是封装成IS_NULL类型的zval。|
|/    |   如果传递过来的变量与别的变量共用一个zval，而且不是引用，则进行强制分离，新的zval的is_ref__gc==0, and refcount__gc==1.|

当一个变量被传递给函数时候，无论它是否被引用，它的refcoung__gc属性都会加一，至少成为2。一份是它自己，另一份是传递给函数的copy。在改变这个zval之前，有时会需要提前把它分成实际意义上的两份copy。这就是"/"格式符的作用。它将把写时复制的zval提前分成两个完整独立的copy，从而使我们可以在下面的代码中随意的对其进行操作。否则我们可能需要不停的提醒自己对接收的参数进行分离等操作。

**可变参数**
有两种其它的zend_get_parameter_**函数，专门用来解决参数很多或者无法提前知道参数数目的问题。想一下php语言中var_dump()函数的用法，我们可以向其传递任意数量的参数，它在内核中的实现其实是这样的：
```
ZEND_FUNCTION(var_dump) {
    int i, argc = ZEND_NUM_ARGS();
    zval ***args;
 
    args = (zval ***)safe_emalloc(argc, sizeof(zval **), 0);
    if (ZEND_NUM_ARGS() == 0 || zend_get_parameters_array_ex(argc, args) == FAILURE) {
        efree(args);
        WRONG_PARAM_COUNT;
    }
    for (i=0; i<argc; i++) {
        php_var_dump(args[i], 1 TSRMLS_CC);
    }
    efree(args);
}
```
程序首先获取参数数量，然后通过safe_emalloc函数申请了相应大小的内存来存放这些zval**类型的参数。这里使用了zend_get_parameters_array_ex()函数来把传递给函数的参数填充到args中。你可能已经立即想到，还存在一个名为zend_get_parameters_array()的函数，唯一不同的是它将zval*类型的参数填充到args中，并且需要ZEND_NUM_ARGS()作为参数。


###4.引用(只讲编译时的传递引用Compile-time Pass-by-ref)

我们需要提前为它定义一个arginfo结构体数组来向内核通知此函数的这个特定行为。在函数声明模块zend_function_entry中应该这样来声明：
```
ZEND_FE(byref_compiletime, byref_compiletime_arginfo)
```
其中byref_compiletime_arginfo是一个arginfo结构体数组
```
typedef struct _zend_arg_info {
    const char *name;               /* 参数的名称*/
    zend_uint name_len;              /* 参数名称的长度*/
    const char *class_name;           /* 类名 */
    zend_uint class_name_len;       /* 类名长度*/
    zend_bool array_type_hint;      /* 数组类型提示 */
    zend_bool allow_null;           /* 是否允许为NULL　*/
    zend_bool pass_by_reference;    /* 是否引用传递 */
    zend_bool return_reference;     /* 返回值是否为引用形式 */
    int required_num_args;          /* 必要参数的数量 */
} zend_arg_info;
```

我们用下面一些宏来定义byref_compiletime_arginfo：

```
/************头部**************/
ZEND_BEGIN_ARG_INFO(byref_compiletime_arginfo, 0)

/************中间参数部分 start*************/
ZEND_ARG_INFO(pass_by_ref, name)        
ZEND_ARG_PASS_INFO(pass_by_ref)        
ZEND_ARG_OBJ_INFO(pass_by_ref, name, classname, allow_null) 
ZEND_ARG_ARRAY_INFO(pass_by_ref, name, allow_null) 
/************中间参数部分 end**************/

/***************尾部*************/
ZEND_END_ARG_INFO()
```

下面来解释相关的宏

```
//name是这个zend_arg_info数组变量的名字。pass_rest_by_reference如果被赋值为1，代表着所有的参数默认都是需要以引用的方式传递(在arginfo中单独声明的除外)
#define ZEND_BEGIN_ARG_INFO(name, pass_rest_by_reference)   ZEND_BEGIN_ARG_INFO_EX(name, pass_rest_by_reference, ZEND_RETURN_VALUE, -1)

//前2个参数与上面相同。return_reference：声明这个函数的返回值需要以引用的形式返回  required_num_args：函数被调用时，传递参数至少为前N个函数(也就是后面参数都有默认值)，当设置为-1时，必须传递所有参数
#define ZEND_BEGIN_ARG_INFO_EX(name, pass_rest_by_reference, return_reference, required_num_args)   
    static const zend_arg_info name[] = {                                                     
        { NULL, 0, NULL, 0, 0, 0, pass_rest_by_reference, return_reference, required_num_args },
```
中间部分

``` 
//如果pass_by_ref为1，则名称为name的参数必须以引用的方式传递，
#define ZEND_ARG_INFO(pass_by_ref, name)        { #name, sizeof(#name)-1, NULL, 0, 0, 0, pass_by_ref, 0, 0 },

//强制所有参数使用引用的方式传递
#define ZEND_ARG_PASS_INFO(pass_by_ref)         { NULL, 0, NULL, 0, 0, 0, pass_by_ref, 0, 0 },
```

```
//下面两个宏实现了类型绑定，也就是说我们在传递某个参数时，必须是数组类型或者某个类的实例。如果最后的参数为真，则除了绑定的数据类型，还可以传递一个NULL数据。
#define ZEND_ARG_OBJ_INFO(pass_by_ref, name, classname, allow_null) { #name, sizeof(#name)-1, #classname, sizeof(#classname)-1, 0, allow_null, pass_by_ref, 0, 0 },
#define ZEND_ARG_ARRAY_INFO(pass_by_ref, name, allow_null) { #name, sizeof(#name)-1, NULL, 0, 1, allow_null, pass_by_ref, 0, 0 },
```
尾部

``` 
#define ZEND_END_ARG_INFO()     };
```

###实例###

```
<?php
    function comp_ref(&$a, $b, array $c ) {
        $a  = $a + $b;
        $c[] = $a;
    } 
   
```
上面函数前2个参数接收数字，第一个参数是引用。函数体做的工作是修改$a为$a+$b,同时把结果添加到$c数组中

```
//arg_info
ZEND_BEGIN_ARG_INFO(byref_compiletime_arginfo, 0)
	ZEND_ARG_INFO(1, 'a') //表示参数$a是引用
	ZEND_ARG_INFO(0, 'b')
	ZEND_ARG_ARRAY_INFO(0, 'c', 1) //表示参数c是个数组，允许为NULL
ZEND_END_ARG_INFO()


ZEND_FUNCTION(comp_ref)
{
	zval *a,*c;
	long b;

	//我们我接收的参数传给zval *a;
	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "zla", &a, &b, &c) == FAILURE)
    {
		RETURN_NULL();
	}

	long tmp = 0;
	tmp = Z_LVAL_P(a) + b;
	Z_LVAL_P(a) = tmp;
 
   array_init(return_value);

	//zend_hash_copy( Z_ARRVAL_P(return_value), Z_ARRVAL_P(c), NULL, NULL, sizeof(zval *) );
	add_next_index_long(c, tmp );
	Z_ARRVAL_P(return_value) = Z_ARRVAL_P(c);

	return;
}
```

执行下面代码，会导致错误的结果。
```
$a = 5;
$b = 4;

$c = [
'ww' => 2,
];

$c = comp_ref($a, $b, $c);
var_dump($c);
```
如果改成
```
$m = comp_ref($a, $b, $c);
var_dump($m);
```
则能看到正确的结果，不知道原因为何，先记录下，以后知道原因了及时改正。有知道的朋友不妨告诉我。我的邮箱是jiangyuanbj AT aliyun.com





